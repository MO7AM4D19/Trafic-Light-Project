
Trafic Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000002fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a54  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000748  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071a  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00001cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000506  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006fb  00000000  00000000  000023a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002a9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_10>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
typedef enum modes{NormalMode,PedestrainMod} Modes;
Modes SystemMode = NormalMode;

void main()
{
	PORT_voidInint();
  7c:	0e 94 df 00 	call	0x1be	; 0x1be <PORT_voidInint>
    while (1) 
    {
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_HIGH);
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	0e 94 5c 00 	call	0xb8	; 0xb8 <DIO_u8SetPinValue>
  8a:	fa cf       	rjmp	.-12     	; 0x80 <main+0x4>

0000008c <DIO_u8SetPortValue>:
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
	u8 Local_u8ErrorState = 0;
	switch(Copy_u8Port)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	49 f0       	breq	.+18     	; 0xa2 <DIO_u8SetPortValue+0x16>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_u8SetPortValue+0x10>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	49 f0       	breq	.+18     	; 0xa8 <DIO_u8SetPortValue+0x1c>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	51 f0       	breq	.+20     	; 0xae <DIO_u8SetPortValue+0x22>
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <DIO_u8SetPortValue+0x28>
	{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;;
  9c:	6b bb       	out	0x1b, r22	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
	u8 Local_u8ErrorState = 0;
  9e:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;;
  a0:	08 95       	ret
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
  a2:	68 bb       	out	0x18, r22	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
	u8 Local_u8ErrorState = 0;
  a4:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;;
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
  a6:	08 95       	ret
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
  a8:	65 bb       	out	0x15, r22	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
	u8 Local_u8ErrorState = 0;
  aa:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;;
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
  ac:	08 95       	ret
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
  ae:	62 bb       	out	0x12, r22	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
	u8 Local_u8ErrorState = 0;
  b0:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;;
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
  b2:	08 95       	ret
		default: Local_u8ErrorState = 1;
  b4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Local_u8ErrorState;
}
  b6:	08 95       	ret

000000b8 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
	u8 Local_u8ErrorState = 0;
	if (Copy_u8Pin<=DIO_u8PIN7)
  b8:	68 30       	cpi	r22, 0x08	; 8
  ba:	08 f0       	brcs	.+2      	; 0xbe <DIO_u8SetPinValue+0x6>
  bc:	78 c0       	rjmp	.+240    	; 0x1ae <DIO_u8SetPinValue+0xf6>
	{
		if (Copy_u8Value == DIO_u8PIN_LOW)
  be:	41 11       	cpse	r20, r1
  c0:	3c c0       	rjmp	.+120    	; 0x13a <DIO_u8SetPinValue+0x82>
		{
			switch(Copy_u8Port)
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	99 f0       	breq	.+38     	; 0xec <DIO_u8SetPinValue+0x34>
  c6:	28 f0       	brcs	.+10     	; 0xd2 <DIO_u8SetPinValue+0x1a>
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	e9 f0       	breq	.+58     	; 0x106 <DIO_u8SetPinValue+0x4e>
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	41 f1       	breq	.+80     	; 0x120 <DIO_u8SetPinValue+0x68>
  d0:	70 c0       	rjmp	.+224    	; 0x1b2 <DIO_u8SetPinValue+0xfa>
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
  d2:	2b b3       	in	r18, 0x1b	; 27
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_u8SetPinValue+0x26>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_u8SetPinValue+0x22>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	8b bb       	out	0x1b, r24	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
	u8 Local_u8ErrorState = 0;
  e8:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (Copy_u8Value == DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
  ea:	08 95       	ret
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
  ec:	28 b3       	in	r18, 0x18	; 24
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_u8SetPinValue+0x40>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_u8SetPinValue+0x3c>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	88 bb       	out	0x18, r24	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
	u8 Local_u8ErrorState = 0;
 102:	80 e0       	ldi	r24, 0x00	; 0
		if (Copy_u8Value == DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 104:	08 95       	ret
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 106:	25 b3       	in	r18, 0x15	; 21
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_u8SetPinValue+0x5a>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_u8SetPinValue+0x56>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	85 bb       	out	0x15, r24	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
	u8 Local_u8ErrorState = 0;
 11c:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 11e:	08 95       	ret
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 120:	22 b3       	in	r18, 0x12	; 18
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_u8SetPinValue+0x74>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_u8SetPinValue+0x70>
 130:	80 95       	com	r24
 132:	82 23       	and	r24, r18
 134:	82 bb       	out	0x12, r24	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
	u8 Local_u8ErrorState = 0;
 136:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 138:	08 95       	ret
				default: Local_u8ErrorState = 1;
			}
		}
		else if (Copy_u8Value == DIO_u8PIN_HIGH)
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	e1 f5       	brne	.+120    	; 0x1b6 <DIO_u8SetPinValue+0xfe>
		{
			switch(Copy_u8Port)
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	91 f0       	breq	.+36     	; 0x166 <DIO_u8SetPinValue+0xae>
 142:	28 f0       	brcs	.+10     	; 0x14e <DIO_u8SetPinValue+0x96>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	d9 f0       	breq	.+54     	; 0x17e <DIO_u8SetPinValue+0xc6>
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	29 f1       	breq	.+74     	; 0x196 <DIO_u8SetPinValue+0xde>
 14c:	36 c0       	rjmp	.+108    	; 0x1ba <DIO_u8SetPinValue+0x102>
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 14e:	2b b3       	in	r18, 0x1b	; 27
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_u8SetPinValue+0xa2>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_u8SetPinValue+0x9e>
 15e:	82 2b       	or	r24, r18
 160:	8b bb       	out	0x1b, r24	; 27
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
	u8 Local_u8ErrorState = 0;
 162:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if (Copy_u8Value == DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 164:	08 95       	ret
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 166:	28 b3       	in	r18, 0x18	; 24
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_u8SetPinValue+0xba>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_u8SetPinValue+0xb6>
 176:	82 2b       	or	r24, r18
 178:	88 bb       	out	0x18, r24	; 24
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
	u8 Local_u8ErrorState = 0;
 17a:	80 e0       	ldi	r24, 0x00	; 0
		else if (Copy_u8Value == DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 17c:	08 95       	ret
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 17e:	25 b3       	in	r18, 0x15	; 21
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_u8SetPinValue+0xd2>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_u8SetPinValue+0xce>
 18e:	82 2b       	or	r24, r18
 190:	85 bb       	out	0x15, r24	; 21
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
	u8 Local_u8ErrorState = 0;
 192:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 194:	08 95       	ret
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 196:	22 b3       	in	r18, 0x12	; 18
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_u8SetPinValue+0xea>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_u8SetPinValue+0xe6>
 1a6:	82 2b       	or	r24, r18
 1a8:	82 bb       	out	0x12, r24	; 18
	return Local_u8ErrorState;
}

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
	u8 Local_u8ErrorState = 0;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 1ac:	08 95       	ret
			Local_u8ErrorState = 1;
		}
	}
	else
	{
		Local_u8ErrorState = 1;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	08 95       	ret
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
				default: Local_u8ErrorState = 1;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	08 95       	ret
				default: Local_u8ErrorState = 1;
			}
		}
		else
		{
			Local_u8ErrorState = 1;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	08 95       	ret
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
				default: Local_u8ErrorState = 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8ErrorState = 1;
	}
	return Local_u8ErrorState;
}
 1bc:	08 95       	ret

000001be <PORT_voidInint>:
#include "..\DIO\DIO_interface.h"


void PORT_voidInint()
{
    DDRA = PORTA_DIR;
 1be:	87 e0       	ldi	r24, 0x07	; 7
 1c0:	8a bb       	out	0x1a, r24	; 26
    DDRB = PORTB_DIR;
 1c2:	17 ba       	out	0x17, r1	; 23
    DDRC = PORTC_DIR;
 1c4:	14 ba       	out	0x14, r1	; 20
    DDRD = PORTD_DIR;
 1c6:	11 ba       	out	0x11, r1	; 17
    DIO_u8SetPortValue(DIO_u8PORTA,PORTA_INIT);
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_u8SetPortValue>
    DIO_u8SetPortValue(DIO_u8PORTB,PORTB_INIT);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_u8SetPortValue>
    DIO_u8SetPortValue(DIO_u8PORTC,PORTC_INIT);
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_u8SetPortValue>
    DIO_u8SetPortValue(DIO_u8PORTD,PORTD_INIT);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_u8SetPortValue>
 1e8:	08 95       	ret

000001ea <__vector_10>:
    OCR0 = Copy_u8Value;
}

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	5f 93       	push	r21
 1fc:	6f 93       	push	r22
 1fe:	7f 93       	push	r23
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
    TMR0_fpCompareMatchFunction();
 20c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 210:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 214:	09 95       	icall
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	2f 93       	push	r18
 244:	3f 93       	push	r19
 246:	4f 93       	push	r20
 248:	5f 93       	push	r21
 24a:	6f 93       	push	r22
 24c:	7f 93       	push	r23
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	af 93       	push	r26
 254:	bf 93       	push	r27
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
    TMR0_fpOverflowFunction();
 25a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <TMR0_fpOverflowFunction>
 25e:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <TMR0_fpOverflowFunction+0x1>
 262:	09 95       	icall
}
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	bf 91       	pop	r27
 26a:	af 91       	pop	r26
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	7f 91       	pop	r23
 272:	6f 91       	pop	r22
 274:	5f 91       	pop	r21
 276:	4f 91       	pop	r20
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
